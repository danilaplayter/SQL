plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'application'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'ru.mentee.power'
version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
    mavenCentral()
}

application {
    mainClass = 'ru.mentee.power.connection.SimpleConnection'
}

ext {
    versions = [
            postgresql       : '42.6.0',
            lombok           : '1.18.30',
            slf4j            : '2.0.9',
            logback          : '1.4.14',
            junit            : '5.10.0',
            assertj          : '3.24.2',
            mockito          : '5.7.0',
            testcontainers   : '1.19.3',
            h2               : '2.2.224',
            googleJavaFormat : '1.17.0',
            jackson          : '2.17.0',
            // Обновленные версии JAXB
            jaxbApi          : '4.0.0',
            jaxbRuntime      : '4.0.2'
    ]
}

dependencies {
    implementation "org.postgresql:postgresql:${versions.postgresql}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    testCompileOnly "org.projectlombok:lombok:${versions.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"

    // Логирование
    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    implementation "ch.qos.logback:logback-classic:${versions.logback}"
    implementation "ch.qos.logback:logback-core:${versions.logback}"

    // Jackson
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"

    // Обновленные зависимости JAXB
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:${versions.jaxbApi}"
    implementation "org.glassfish.jaxb:jaxb-runtime:${versions.jaxbRuntime}"

    // Тестирование
    testImplementation platform("org.junit:junit-bom:${versions.junit}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    testImplementation "org.assertj:assertj-core:${versions.assertj}"
    testImplementation "com.h2database:h2:${versions.h2}"
    testImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
    testImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    testImplementation "org.testcontainers:postgresql:${versions.testcontainers}"
}

// Остальная конфигурация (checkstyle, test, jacoco, spotless) остается без изменений
checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
    maxErrors = 0
    maxWarnings = -1
    ignoreFailures = true
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

tasks.named('check') {
    dependsOn jacocoTestReport
}

spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat("${versions.googleJavaFormat}").aosp().reflowLongStrings().skipJavadocFormatting()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader '/* @MENTEE_POWER (C)$YEAR */'
    }

    sql {
        target 'src/**/*.sql'
        dbeaver()
    }

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '.gitattributes'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}
